plugins {
    id 'java'
    id 'java-library'
}

java {
    // select one source-code (JDK) option
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

project.ext {
    jmeVersion = '3.7.0-stable'
}

repositories {
    mavenCentral()
}

dependencies {

    // jMonkeyEngine
    implementation 'org.jmonkeyengine:jme3-core:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmeVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmeVersion
    
    // Mac OS with LWJGL 3 doesn't allow AWT/Swing
    if (!System.getProperty("os.name").toLowerCase().contains("mac")) {
        runtimeOnly 'org.jmonkeyengine:jme3-awt-dialogs:' + jmeVersion
    }
    
    // Physics
    implementation 'com.github.stephengold:Minie:8.2.0+big4'

    // select one version of LWJGL
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmeVersion  // LWJGL 2.x
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmeVersion // LWJGL 3.x

    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-plugins:' + jmeVersion

    //runtimeOnly 'org.jmonkeyengine:jme3-testdata:' + jmeVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.4.0-alpha6'
}

wrapper {
    gradleVersion = '8.4'
}

// Register cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
